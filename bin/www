#!/usr/bin/env node

/**
 * Module dependencies.
 */
const path = require('path');
const debug = require('debug')('the-project-api');
const http = require('http');
const mongoose = require('mongoose');
const app = require('../app');
const config = require('../config');

/**
 * Views setup
 */
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

/**
 * Get values from environment and store in Express.
 */
const mongoUri = config.mongo.url;
const mongoOptions = config.mongo.options;
const env = config.env;
const ip = config.server.ip;
const port = normalizePort(config.server.port);
const jwtSecret = config.jwtSecret;
app.set('mongoUri', mongoUri);
app.set('env', env);
app.set('ip,', ip);
app.set('port', port);
app.set('jwtSecret', jwtSecret);

/**
 * Connecting to MongoDB
 */
mongoose.connect(mongoUri, mongoOptions);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, ip, () => {
    console.log('Listening on http://%s:%d, in %s mode', ip, port, env)
});

server.on('error', onError);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
